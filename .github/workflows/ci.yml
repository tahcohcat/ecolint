# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Build binary
        run: go build -o ecolint cmd/ecolint/main.go

      - name: Test binary
        run: |
          ./ecolint --help
          ./ecolint init --force
          echo "TEST_VAR=value" > test.env
          ./ecolint lint test.env

  lint-env-files:
    name: Lint Environment Files
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build ecolint
        run: go build -o ecolint cmd/ecolint/main.go

      - name: Lint environment files
        run: |
          ./ecolint lint --format github --recursive examples/
        continue-on-error: true

  build:
    name: Build for multiple platforms
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BINARY_NAME="ecolint"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          go build -o "dist/${BINARY_NAME}-${GOOS}-${GOARCH}" cmd/ecolint/main.go

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ecolint-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/ecolint-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---

# .github/workflows/lint-pr-env-files.yml
name: Environment File Linting

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/.env*'
      - '**/env/*'
      - '**/*.env'

jobs:
  lint-env-files:
    name: Lint Environment Files
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build ecolint
        run: go build -o ecolint cmd/ecolint/main.go

      - name: Find changed env files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/.env*
            **/env/*
            **/*.env

      - name: Lint changed environment files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Linting changed environment files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "::group::Linting $file"
            ./ecolint lint --format github "$file" || true
            echo "::endgroup::"
          done

      - name: Comment PR
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const files = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ');
            
            let output = '';
            let hasIssues = false;
            
            for (const file of files) {
              if (!file) continue;
            
              try {
                const result = execSync(`./ecolint lint --format json "${file}"`, { encoding: 'utf-8' });
                const lintResult = JSON.parse(result);
            
                if (lintResult.count > 0) {
                  hasIssues = true;
                  output += `\n## 🚨 Issues found in \`${file}\`\n\n`;
            
                  for (const issue of lintResult.issues) {
                    const icon = getIssueIcon(issue.name);
                    output += `- ${icon} **Line ${issue.first_line || issue.line}**: ${issue.name} '${issue.key}'\n`;
            
                    if (issue.recommendations && issue.recommendations.length > 0) {
                      output += `  - 💡 ${issue.recommendations.join('\n  - 💡 ')}\n`;
                    }
                  }
                }
              } catch (error) {
                output += `\n## ❌ Error linting \`${file}\`\n\n`;
                output += `\`\`\`\n${error.message}\n\`\`\`\n`;
              }
            }
            
            function getIssueIcon(issueName) {
              const name = issueName.toLowerCase();
              if (name.includes('duplicate')) return '🔄';
              if (name.includes('missing')) return '❓';
              if (name.includes('empty')) return '🗳️';
              if (name.includes('syntax') || name.includes('malformed')) return '🔧';
              if (name.includes('security') || name.includes('secret')) return '🔒';
              if (name.includes('convention') || name.includes('format')) return '📐';
              return '⚠️';
            }
            
            if (hasIssues) {
              const commentBody = `# 🌱 Ecolint Report\n\n` +
                `Environment file linting found some issues that should be addressed:\n` +
                output +
                `\n\n---\n` +
                `💡 **Tip**: Run \`ecolint fix\` to automatically fix many of these issues!\n` +
                `📚 **Documentation**: [Ecolint Rules](https://github.com/tahcohcat/ecolint#rules)`;
            
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              const commentBody = `# 🌱 Ecolint Report\n\n` +
                `✅ **Great job!** All environment files look clean and follow best practices.\n\n` +
                `Files checked: ${files.filter(f => f).length}`;
            
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }